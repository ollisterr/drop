/**
 * Generated by orval v6.3.0 üç∫
 * Do not edit manually.
 * Drop API
 * The OpenAPI schema for drop.energy
 * OpenAPI spec version: 0.1.0
 */
import { useQuery, UseQueryOptions, QueryFunction } from "react-query";
import type { HTTPValidationError } from ".././model";
import { customInstance } from ".././axios";

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

/**
 * @summary Get User Daily Consumption
 */
export const getUserDailyConsumptionDailyConsumptionUsernameGet = (
  username: unknown
) => {
  return customInstance<unknown>({
    url: `/daily-consumption/${username}`,
    method: "get",
  });
};

export const getGetUserDailyConsumptionDailyConsumptionUsernameGetQueryKey = (
  username: unknown
) => [`/daily-consumption/${username}`];

export const useGetUserDailyConsumptionDailyConsumptionUsernameGet = <
  TData = AsyncReturnType<
    typeof getUserDailyConsumptionDailyConsumptionUsernameGet
  >,
  TError = HTTPValidationError
>(
  username: unknown,
  options?: {
    query?: UseQueryOptions<
      AsyncReturnType<
        typeof getUserDailyConsumptionDailyConsumptionUsernameGet
      >,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options || {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetUserDailyConsumptionDailyConsumptionUsernameGetQueryKey(username);

  const queryFn: QueryFunction<
    AsyncReturnType<typeof getUserDailyConsumptionDailyConsumptionUsernameGet>
  > = () => getUserDailyConsumptionDailyConsumptionUsernameGet(username);

  const query = useQuery<
    AsyncReturnType<typeof getUserDailyConsumptionDailyConsumptionUsernameGet>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!username, ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};
