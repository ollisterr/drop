/**
 * Generated by orval v6.3.0 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import axios,{
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction
} from 'react-query'
import type {
  Pets,
  Error,
  ListPetsParams
} from '.././model'

type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


/**
 * @summary List all pets
 */
export const listPets = (
    params?: ListPetsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Pets>> => {
    return axios.get(
      `/pets`,
      {
        params,
    ...options },
    );
  }


export const getListPetsQueryKey = (params?: ListPetsParams,) => [`/pets`, ...(params ? [params]: [])];

    
export const useListPets = <TData = AsyncReturnType<typeof listPets>, TError = Error>(
 params?: ListPetsParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof listPets>, TError, TData>, axios?: AxiosRequestConfig}

  ) => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getListPetsQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof listPets>> = () => listPets(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof listPets>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}

/**
 * @summary Create a pet
 */
export const createPets = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `/pets`,
      undefined,options
    );
  }



    export const useCreatePets = <TError = Error,
    TVariables = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof createPets>, TError,TVariables, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof createPets>, TVariables> = () => {
          ;

          return  createPets(axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof createPets>, TError, TVariables, TContext>(mutationFn, mutationOptions)
    }
    /**
 * @summary Info for a specific pet
 */
export const showPetById = (
    petId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Pets>> => {
    return axios.get(
      `/pets/${petId}`,options
    );
  }


export const getShowPetByIdQueryKey = (petId: string,) => [`/pets/${petId}`];

    
export const useShowPetById = <TData = AsyncReturnType<typeof showPetById>, TError = Error>(
 petId: string, options?: { query?:UseQueryOptions<AsyncReturnType<typeof showPetById>, TError, TData>, axios?: AxiosRequestConfig}

  ) => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getShowPetByIdQueryKey(petId);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof showPetById>> = () => showPetById(petId, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof showPetById>, TError, TData>(queryKey, queryFn, {enabled: !!(petId), ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

