/**
 * Generated by orval v6.3.0 üç∫
 * Do not edit manually.
 * Drop API
 * The OpenAPI schema for drop.energy
 * OpenAPI spec version: 0.1.0
 */
import { useQuery, UseQueryOptions, QueryFunction } from "react-query";
import type { GroupPydantic, HTTPValidationError } from ".././model";
import { customInstance } from ".././axios";

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

/**
 * @summary Read Users
 */
export const readUsersUserGroupsApartmentIdGet = (apartmentid: number) => {
  return customInstance<GroupPydantic[]>({
    url: `/user/groups/${apartmentid}`,
    method: "get",
  });
};

export const getReadUsersUserGroupsApartmentIdGetQueryKey = (
  apartmentid: number
) => [`/user/groups/${apartmentid}`];

export const useReadUsersUserGroupsApartmentIdGet = <
  TData = AsyncReturnType<typeof readUsersUserGroupsApartmentIdGet>,
  TError = HTTPValidationError
>(
  apartmentid: number,
  options?: {
    query?: UseQueryOptions<
      AsyncReturnType<typeof readUsersUserGroupsApartmentIdGet>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options || {};

  const queryKey =
    queryOptions?.queryKey ??
    getReadUsersUserGroupsApartmentIdGetQueryKey(apartmentid);

  const queryFn: QueryFunction<
    AsyncReturnType<typeof readUsersUserGroupsApartmentIdGet>
  > = () => readUsersUserGroupsApartmentIdGet(apartmentid);

  const query = useQuery<
    AsyncReturnType<typeof readUsersUserGroupsApartmentIdGet>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!apartmentid, ...queryOptions });

  return {
    queryKey,
    ...query,
  };
};
