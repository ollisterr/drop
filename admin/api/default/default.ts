/**
 * Generated by orval v6.3.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import axios, { AxiosRequestConfig, AxiosResponse } from "axios";
import { useQuery, UseQueryOptions, QueryFunction } from "react-query";
import type {
    ApartmentPlural,
    HTTPValidationError,
    GetApartmentGetParams,
    CountModel,
    CountApartmentCountGetParams,
    IdsApartmentIdsGet200,
    IdsApartmentIdsGetParams,
    NewApartmentNewGet200,
    ReferencesModel,
    SchemaApartmentSchemaGet200,
    ApartmentOutput,
    AppliancePlural,
    GetApplianceGetParams,
    CountApplianceCountGetParams,
    IdsApplianceIdsGet200,
    IdsApplianceIdsGetParams,
    NewApplianceNewGet200,
    SchemaApplianceSchemaGet200,
    ApplianceOutput,
    GroupPlural,
    GetGroupGetParams,
    CountGroupCountGetParams,
    IdsGroupIdsGet200,
    IdsGroupIdsGetParams,
    NewGroupNewGet200,
    SchemaGroupSchemaGet200,
    GroupOutput,
    MeasurementPlural,
    GetMeasurementGetParams,
    CountMeasurementCountGetParams,
    IdsMeasurementIdsGet200,
    IdsMeasurementIdsGetParams,
    NewMeasurementNewGet200,
    SchemaMeasurementSchemaGet200,
    MeasurementOutput,
    ResidentPlural,
    GetResidentGetParams,
    CountResidentCountGetParams,
    IdsResidentIdsGet200,
    IdsResidentIdsGetParams,
    NewResidentNewGet200,
    SchemaResidentSchemaGet200,
    ResidentOutput,
} from ".././model";

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
    ...args: any
) => Promise<infer R>
    ? R
    : any;

/**
 * Returns all rows matching the given query.
 * @summary Get
 */
export const getApartmentGet = (
    params?: GetApartmentGetParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<ApartmentPlural>> => {
    return axios.get(`/apartment`, {
        params,
        ...options,
    });
};

export const getGetApartmentGetQueryKey = (params?: GetApartmentGetParams) => [
    `/apartment`,
    ...(params ? [params] : []),
];

export const useGetApartmentGet = <
    TData = AsyncReturnType<typeof getApartmentGet>,
    TError = HTTPValidationError
>(
    params?: GetApartmentGetParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getApartmentGet>,
            TError,
            TData
        >;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApartmentGetQueryKey(params);

    const queryFn: QueryFunction<AsyncReturnType<typeof getApartmentGet>> =
        () => getApartmentGet(params, axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof getApartmentGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns the number of rows matching the given query.
 * @summary Count
 */
export const countApartmentCountGet = (
    params?: CountApartmentCountGetParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<CountModel>> => {
    return axios.get(`/apartment/count`, {
        params,
        ...options,
    });
};

export const getCountApartmentCountGetQueryKey = (
    params?: CountApartmentCountGetParams
) => [`/apartment/count`, ...(params ? [params] : [])];

export const useCountApartmentCountGet = <
    TData = AsyncReturnType<typeof countApartmentCountGet>,
    TError = HTTPValidationError
>(
    params?: CountApartmentCountGetParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof countApartmentCountGet>,
            TError,
            TData
        >;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getCountApartmentCountGetQueryKey(params);

    const queryFn: QueryFunction<
        AsyncReturnType<typeof countApartmentCountGet>
    > = () => countApartmentCountGet(params, axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof countApartmentCountGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns a mapping of row IDs to a readable representation.
 * @summary Ids
 */
export const idsApartmentIdsGet = (
    params?: IdsApartmentIdsGetParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<IdsApartmentIdsGet200>> => {
    return axios.get(`/apartment/ids`, {
        params,
        ...options,
    });
};

export const getIdsApartmentIdsGetQueryKey = (
    params?: IdsApartmentIdsGetParams
) => [`/apartment/ids`, ...(params ? [params] : [])];

export const useIdsApartmentIdsGet = <
    TData = AsyncReturnType<typeof idsApartmentIdsGet>,
    TError = HTTPValidationError
>(
    params?: IdsApartmentIdsGetParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof idsApartmentIdsGet>,
            TError,
            TData
        >;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getIdsApartmentIdsGetQueryKey(params);

    const queryFn: QueryFunction<AsyncReturnType<typeof idsApartmentIdsGet>> =
        () => idsApartmentIdsGet(params, axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof idsApartmentIdsGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns all of the default values for a new row,
but doesn't save it.
 * @summary New
 */
export const newApartmentNewGet = (
    options?: AxiosRequestConfig
): Promise<AxiosResponse<NewApartmentNewGet200>> => {
    return axios.get(`/apartment/new`, options);
};

export const getNewApartmentNewGetQueryKey = () => [`/apartment/new`];

export const useNewApartmentNewGet = <
    TData = AsyncReturnType<typeof newApartmentNewGet>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<
        AsyncReturnType<typeof newApartmentNewGet>,
        TError,
        TData
    >;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey = queryOptions?.queryKey ?? getNewApartmentNewGetQueryKey();

    const queryFn: QueryFunction<AsyncReturnType<typeof newApartmentNewGet>> =
        () => newApartmentNewGet(axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof newApartmentNewGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns a list of objects showing relationships with other tables.
 * @summary References
 */
export const referencesApartmentReferencesGet = (
    options?: AxiosRequestConfig
): Promise<AxiosResponse<ReferencesModel>> => {
    return axios.get(`/apartment/references`, options);
};

export const getReferencesApartmentReferencesGetQueryKey = () => [
    `/apartment/references`,
];

export const useReferencesApartmentReferencesGet = <
    TData = AsyncReturnType<typeof referencesApartmentReferencesGet>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<
        AsyncReturnType<typeof referencesApartmentReferencesGet>,
        TError,
        TData
    >;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getReferencesApartmentReferencesGetQueryKey();

    const queryFn: QueryFunction<
        AsyncReturnType<typeof referencesApartmentReferencesGet>
    > = () => referencesApartmentReferencesGet(axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof referencesApartmentReferencesGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns the JSON schema for the given table.
 * @summary Schema
 */
export const schemaApartmentSchemaGet = (
    options?: AxiosRequestConfig
): Promise<AxiosResponse<SchemaApartmentSchemaGet200>> => {
    return axios.get(`/apartment/schema`, options);
};

export const getSchemaApartmentSchemaGetQueryKey = () => [`/apartment/schema`];

export const useSchemaApartmentSchemaGet = <
    TData = AsyncReturnType<typeof schemaApartmentSchemaGet>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<
        AsyncReturnType<typeof schemaApartmentSchemaGet>,
        TError,
        TData
    >;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getSchemaApartmentSchemaGetQueryKey();

    const queryFn: QueryFunction<
        AsyncReturnType<typeof schemaApartmentSchemaGet>
    > = () => schemaApartmentSchemaGet(axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof schemaApartmentSchemaGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Retrieve a single row from the table.
 * @summary Get Single
 */
export const getSingleApartmentRowIdGet = (
    rowid: number,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<ApartmentOutput>> => {
    return axios.get(`/apartment/${rowid}`, options);
};

export const getGetSingleApartmentRowIdGetQueryKey = (rowid: number) => [
    `/apartment/${rowid}`,
];

export const useGetSingleApartmentRowIdGet = <
    TData = AsyncReturnType<typeof getSingleApartmentRowIdGet>,
    TError = HTTPValidationError
>(
    rowid: number,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getSingleApartmentRowIdGet>,
            TError,
            TData
        >;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getGetSingleApartmentRowIdGetQueryKey(rowid);

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getSingleApartmentRowIdGet>
    > = () => getSingleApartmentRowIdGet(rowid, axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof getSingleApartmentRowIdGet>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!rowid, ...queryOptions });

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns all rows matching the given query.
 * @summary Get
 */
export const getApplianceGet = (
    params?: GetApplianceGetParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<AppliancePlural>> => {
    return axios.get(`/appliance`, {
        params,
        ...options,
    });
};

export const getGetApplianceGetQueryKey = (params?: GetApplianceGetParams) => [
    `/appliance`,
    ...(params ? [params] : []),
];

export const useGetApplianceGet = <
    TData = AsyncReturnType<typeof getApplianceGet>,
    TError = HTTPValidationError
>(
    params?: GetApplianceGetParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getApplianceGet>,
            TError,
            TData
        >;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApplianceGetQueryKey(params);

    const queryFn: QueryFunction<AsyncReturnType<typeof getApplianceGet>> =
        () => getApplianceGet(params, axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof getApplianceGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns the number of rows matching the given query.
 * @summary Count
 */
export const countApplianceCountGet = (
    params?: CountApplianceCountGetParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<CountModel>> => {
    return axios.get(`/appliance/count`, {
        params,
        ...options,
    });
};

export const getCountApplianceCountGetQueryKey = (
    params?: CountApplianceCountGetParams
) => [`/appliance/count`, ...(params ? [params] : [])];

export const useCountApplianceCountGet = <
    TData = AsyncReturnType<typeof countApplianceCountGet>,
    TError = HTTPValidationError
>(
    params?: CountApplianceCountGetParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof countApplianceCountGet>,
            TError,
            TData
        >;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getCountApplianceCountGetQueryKey(params);

    const queryFn: QueryFunction<
        AsyncReturnType<typeof countApplianceCountGet>
    > = () => countApplianceCountGet(params, axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof countApplianceCountGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns a mapping of row IDs to a readable representation.
 * @summary Ids
 */
export const idsApplianceIdsGet = (
    params?: IdsApplianceIdsGetParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<IdsApplianceIdsGet200>> => {
    return axios.get(`/appliance/ids`, {
        params,
        ...options,
    });
};

export const getIdsApplianceIdsGetQueryKey = (
    params?: IdsApplianceIdsGetParams
) => [`/appliance/ids`, ...(params ? [params] : [])];

export const useIdsApplianceIdsGet = <
    TData = AsyncReturnType<typeof idsApplianceIdsGet>,
    TError = HTTPValidationError
>(
    params?: IdsApplianceIdsGetParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof idsApplianceIdsGet>,
            TError,
            TData
        >;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getIdsApplianceIdsGetQueryKey(params);

    const queryFn: QueryFunction<AsyncReturnType<typeof idsApplianceIdsGet>> =
        () => idsApplianceIdsGet(params, axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof idsApplianceIdsGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns all of the default values for a new row,
but doesn't save it.
 * @summary New
 */
export const newApplianceNewGet = (
    options?: AxiosRequestConfig
): Promise<AxiosResponse<NewApplianceNewGet200>> => {
    return axios.get(`/appliance/new`, options);
};

export const getNewApplianceNewGetQueryKey = () => [`/appliance/new`];

export const useNewApplianceNewGet = <
    TData = AsyncReturnType<typeof newApplianceNewGet>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<
        AsyncReturnType<typeof newApplianceNewGet>,
        TError,
        TData
    >;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey = queryOptions?.queryKey ?? getNewApplianceNewGetQueryKey();

    const queryFn: QueryFunction<AsyncReturnType<typeof newApplianceNewGet>> =
        () => newApplianceNewGet(axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof newApplianceNewGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns a list of objects showing relationships with other tables.
 * @summary References
 */
export const referencesApplianceReferencesGet = (
    options?: AxiosRequestConfig
): Promise<AxiosResponse<ReferencesModel>> => {
    return axios.get(`/appliance/references`, options);
};

export const getReferencesApplianceReferencesGetQueryKey = () => [
    `/appliance/references`,
];

export const useReferencesApplianceReferencesGet = <
    TData = AsyncReturnType<typeof referencesApplianceReferencesGet>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<
        AsyncReturnType<typeof referencesApplianceReferencesGet>,
        TError,
        TData
    >;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getReferencesApplianceReferencesGetQueryKey();

    const queryFn: QueryFunction<
        AsyncReturnType<typeof referencesApplianceReferencesGet>
    > = () => referencesApplianceReferencesGet(axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof referencesApplianceReferencesGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns the JSON schema for the given table.
 * @summary Schema
 */
export const schemaApplianceSchemaGet = (
    options?: AxiosRequestConfig
): Promise<AxiosResponse<SchemaApplianceSchemaGet200>> => {
    return axios.get(`/appliance/schema`, options);
};

export const getSchemaApplianceSchemaGetQueryKey = () => [`/appliance/schema`];

export const useSchemaApplianceSchemaGet = <
    TData = AsyncReturnType<typeof schemaApplianceSchemaGet>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<
        AsyncReturnType<typeof schemaApplianceSchemaGet>,
        TError,
        TData
    >;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getSchemaApplianceSchemaGetQueryKey();

    const queryFn: QueryFunction<
        AsyncReturnType<typeof schemaApplianceSchemaGet>
    > = () => schemaApplianceSchemaGet(axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof schemaApplianceSchemaGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Retrieve a single row from the table.
 * @summary Get Single
 */
export const getSingleApplianceRowIdGet = (
    rowid: number,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<ApplianceOutput>> => {
    return axios.get(`/appliance/${rowid}`, options);
};

export const getGetSingleApplianceRowIdGetQueryKey = (rowid: number) => [
    `/appliance/${rowid}`,
];

export const useGetSingleApplianceRowIdGet = <
    TData = AsyncReturnType<typeof getSingleApplianceRowIdGet>,
    TError = HTTPValidationError
>(
    rowid: number,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getSingleApplianceRowIdGet>,
            TError,
            TData
        >;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getGetSingleApplianceRowIdGetQueryKey(rowid);

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getSingleApplianceRowIdGet>
    > = () => getSingleApplianceRowIdGet(rowid, axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof getSingleApplianceRowIdGet>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!rowid, ...queryOptions });

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns all rows matching the given query.
 * @summary Get
 */
export const getGroupGet = (
    params?: GetGroupGetParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<GroupPlural>> => {
    return axios.get(`/group`, {
        params,
        ...options,
    });
};

export const getGetGroupGetQueryKey = (params?: GetGroupGetParams) => [
    `/group`,
    ...(params ? [params] : []),
];

export const useGetGroupGet = <
    TData = AsyncReturnType<typeof getGroupGet>,
    TError = HTTPValidationError
>(
    params?: GetGroupGetParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getGroupGet>,
            TError,
            TData
        >;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey = queryOptions?.queryKey ?? getGetGroupGetQueryKey(params);

    const queryFn: QueryFunction<AsyncReturnType<typeof getGroupGet>> = () =>
        getGroupGet(params, axiosOptions);

    const query = useQuery<AsyncReturnType<typeof getGroupGet>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    );

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns the number of rows matching the given query.
 * @summary Count
 */
export const countGroupCountGet = (
    params?: CountGroupCountGetParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<CountModel>> => {
    return axios.get(`/group/count`, {
        params,
        ...options,
    });
};

export const getCountGroupCountGetQueryKey = (
    params?: CountGroupCountGetParams
) => [`/group/count`, ...(params ? [params] : [])];

export const useCountGroupCountGet = <
    TData = AsyncReturnType<typeof countGroupCountGet>,
    TError = HTTPValidationError
>(
    params?: CountGroupCountGetParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof countGroupCountGet>,
            TError,
            TData
        >;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getCountGroupCountGetQueryKey(params);

    const queryFn: QueryFunction<AsyncReturnType<typeof countGroupCountGet>> =
        () => countGroupCountGet(params, axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof countGroupCountGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns a mapping of row IDs to a readable representation.
 * @summary Ids
 */
export const idsGroupIdsGet = (
    params?: IdsGroupIdsGetParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<IdsGroupIdsGet200>> => {
    return axios.get(`/group/ids`, {
        params,
        ...options,
    });
};

export const getIdsGroupIdsGetQueryKey = (params?: IdsGroupIdsGetParams) => [
    `/group/ids`,
    ...(params ? [params] : []),
];

export const useIdsGroupIdsGet = <
    TData = AsyncReturnType<typeof idsGroupIdsGet>,
    TError = HTTPValidationError
>(
    params?: IdsGroupIdsGetParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof idsGroupIdsGet>,
            TError,
            TData
        >;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getIdsGroupIdsGetQueryKey(params);

    const queryFn: QueryFunction<AsyncReturnType<typeof idsGroupIdsGet>> = () =>
        idsGroupIdsGet(params, axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof idsGroupIdsGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns all of the default values for a new row,
but doesn't save it.
 * @summary New
 */
export const newGroupNewGet = (
    options?: AxiosRequestConfig
): Promise<AxiosResponse<NewGroupNewGet200>> => {
    return axios.get(`/group/new`, options);
};

export const getNewGroupNewGetQueryKey = () => [`/group/new`];

export const useNewGroupNewGet = <
    TData = AsyncReturnType<typeof newGroupNewGet>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<
        AsyncReturnType<typeof newGroupNewGet>,
        TError,
        TData
    >;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey = queryOptions?.queryKey ?? getNewGroupNewGetQueryKey();

    const queryFn: QueryFunction<AsyncReturnType<typeof newGroupNewGet>> = () =>
        newGroupNewGet(axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof newGroupNewGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns a list of objects showing relationships with other tables.
 * @summary References
 */
export const referencesGroupReferencesGet = (
    options?: AxiosRequestConfig
): Promise<AxiosResponse<ReferencesModel>> => {
    return axios.get(`/group/references`, options);
};

export const getReferencesGroupReferencesGetQueryKey = () => [
    `/group/references`,
];

export const useReferencesGroupReferencesGet = <
    TData = AsyncReturnType<typeof referencesGroupReferencesGet>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<
        AsyncReturnType<typeof referencesGroupReferencesGet>,
        TError,
        TData
    >;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getReferencesGroupReferencesGetQueryKey();

    const queryFn: QueryFunction<
        AsyncReturnType<typeof referencesGroupReferencesGet>
    > = () => referencesGroupReferencesGet(axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof referencesGroupReferencesGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns the JSON schema for the given table.
 * @summary Schema
 */
export const schemaGroupSchemaGet = (
    options?: AxiosRequestConfig
): Promise<AxiosResponse<SchemaGroupSchemaGet200>> => {
    return axios.get(`/group/schema`, options);
};

export const getSchemaGroupSchemaGetQueryKey = () => [`/group/schema`];

export const useSchemaGroupSchemaGet = <
    TData = AsyncReturnType<typeof schemaGroupSchemaGet>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<
        AsyncReturnType<typeof schemaGroupSchemaGet>,
        TError,
        TData
    >;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getSchemaGroupSchemaGetQueryKey();

    const queryFn: QueryFunction<AsyncReturnType<typeof schemaGroupSchemaGet>> =
        () => schemaGroupSchemaGet(axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof schemaGroupSchemaGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Retrieve a single row from the table.
 * @summary Get Single
 */
export const getSingleGroupRowIdGet = (
    rowid: number,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<GroupOutput>> => {
    return axios.get(`/group/${rowid}`, options);
};

export const getGetSingleGroupRowIdGetQueryKey = (rowid: number) => [
    `/group/${rowid}`,
];

export const useGetSingleGroupRowIdGet = <
    TData = AsyncReturnType<typeof getSingleGroupRowIdGet>,
    TError = HTTPValidationError
>(
    rowid: number,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getSingleGroupRowIdGet>,
            TError,
            TData
        >;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getGetSingleGroupRowIdGetQueryKey(rowid);

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getSingleGroupRowIdGet>
    > = () => getSingleGroupRowIdGet(rowid, axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof getSingleGroupRowIdGet>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!rowid, ...queryOptions });

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns all rows matching the given query.
 * @summary Get
 */
export const getMeasurementGet = (
    params?: GetMeasurementGetParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<MeasurementPlural>> => {
    return axios.get(`/measurement`, {
        params,
        ...options,
    });
};

export const getGetMeasurementGetQueryKey = (
    params?: GetMeasurementGetParams
) => [`/measurement`, ...(params ? [params] : [])];

export const useGetMeasurementGet = <
    TData = AsyncReturnType<typeof getMeasurementGet>,
    TError = HTTPValidationError
>(
    params?: GetMeasurementGetParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getMeasurementGet>,
            TError,
            TData
        >;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getGetMeasurementGetQueryKey(params);

    const queryFn: QueryFunction<AsyncReturnType<typeof getMeasurementGet>> =
        () => getMeasurementGet(params, axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof getMeasurementGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns the number of rows matching the given query.
 * @summary Count
 */
export const countMeasurementCountGet = (
    params?: CountMeasurementCountGetParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<CountModel>> => {
    return axios.get(`/measurement/count`, {
        params,
        ...options,
    });
};

export const getCountMeasurementCountGetQueryKey = (
    params?: CountMeasurementCountGetParams
) => [`/measurement/count`, ...(params ? [params] : [])];

export const useCountMeasurementCountGet = <
    TData = AsyncReturnType<typeof countMeasurementCountGet>,
    TError = HTTPValidationError
>(
    params?: CountMeasurementCountGetParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof countMeasurementCountGet>,
            TError,
            TData
        >;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getCountMeasurementCountGetQueryKey(params);

    const queryFn: QueryFunction<
        AsyncReturnType<typeof countMeasurementCountGet>
    > = () => countMeasurementCountGet(params, axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof countMeasurementCountGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns a mapping of row IDs to a readable representation.
 * @summary Ids
 */
export const idsMeasurementIdsGet = (
    params?: IdsMeasurementIdsGetParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<IdsMeasurementIdsGet200>> => {
    return axios.get(`/measurement/ids`, {
        params,
        ...options,
    });
};

export const getIdsMeasurementIdsGetQueryKey = (
    params?: IdsMeasurementIdsGetParams
) => [`/measurement/ids`, ...(params ? [params] : [])];

export const useIdsMeasurementIdsGet = <
    TData = AsyncReturnType<typeof idsMeasurementIdsGet>,
    TError = HTTPValidationError
>(
    params?: IdsMeasurementIdsGetParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof idsMeasurementIdsGet>,
            TError,
            TData
        >;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getIdsMeasurementIdsGetQueryKey(params);

    const queryFn: QueryFunction<AsyncReturnType<typeof idsMeasurementIdsGet>> =
        () => idsMeasurementIdsGet(params, axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof idsMeasurementIdsGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns all of the default values for a new row,
but doesn't save it.
 * @summary New
 */
export const newMeasurementNewGet = (
    options?: AxiosRequestConfig
): Promise<AxiosResponse<NewMeasurementNewGet200>> => {
    return axios.get(`/measurement/new`, options);
};

export const getNewMeasurementNewGetQueryKey = () => [`/measurement/new`];

export const useNewMeasurementNewGet = <
    TData = AsyncReturnType<typeof newMeasurementNewGet>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<
        AsyncReturnType<typeof newMeasurementNewGet>,
        TError,
        TData
    >;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getNewMeasurementNewGetQueryKey();

    const queryFn: QueryFunction<AsyncReturnType<typeof newMeasurementNewGet>> =
        () => newMeasurementNewGet(axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof newMeasurementNewGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns a list of objects showing relationships with other tables.
 * @summary References
 */
export const referencesMeasurementReferencesGet = (
    options?: AxiosRequestConfig
): Promise<AxiosResponse<ReferencesModel>> => {
    return axios.get(`/measurement/references`, options);
};

export const getReferencesMeasurementReferencesGetQueryKey = () => [
    `/measurement/references`,
];

export const useReferencesMeasurementReferencesGet = <
    TData = AsyncReturnType<typeof referencesMeasurementReferencesGet>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<
        AsyncReturnType<typeof referencesMeasurementReferencesGet>,
        TError,
        TData
    >;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ??
        getReferencesMeasurementReferencesGetQueryKey();

    const queryFn: QueryFunction<
        AsyncReturnType<typeof referencesMeasurementReferencesGet>
    > = () => referencesMeasurementReferencesGet(axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof referencesMeasurementReferencesGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns the JSON schema for the given table.
 * @summary Schema
 */
export const schemaMeasurementSchemaGet = (
    options?: AxiosRequestConfig
): Promise<AxiosResponse<SchemaMeasurementSchemaGet200>> => {
    return axios.get(`/measurement/schema`, options);
};

export const getSchemaMeasurementSchemaGetQueryKey = () => [
    `/measurement/schema`,
];

export const useSchemaMeasurementSchemaGet = <
    TData = AsyncReturnType<typeof schemaMeasurementSchemaGet>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<
        AsyncReturnType<typeof schemaMeasurementSchemaGet>,
        TError,
        TData
    >;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getSchemaMeasurementSchemaGetQueryKey();

    const queryFn: QueryFunction<
        AsyncReturnType<typeof schemaMeasurementSchemaGet>
    > = () => schemaMeasurementSchemaGet(axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof schemaMeasurementSchemaGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Retrieve a single row from the table.
 * @summary Get Single
 */
export const getSingleMeasurementRowIdGet = (
    rowid: number,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<MeasurementOutput>> => {
    return axios.get(`/measurement/${rowid}`, options);
};

export const getGetSingleMeasurementRowIdGetQueryKey = (rowid: number) => [
    `/measurement/${rowid}`,
];

export const useGetSingleMeasurementRowIdGet = <
    TData = AsyncReturnType<typeof getSingleMeasurementRowIdGet>,
    TError = HTTPValidationError
>(
    rowid: number,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getSingleMeasurementRowIdGet>,
            TError,
            TData
        >;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ??
        getGetSingleMeasurementRowIdGetQueryKey(rowid);

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getSingleMeasurementRowIdGet>
    > = () => getSingleMeasurementRowIdGet(rowid, axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof getSingleMeasurementRowIdGet>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!rowid, ...queryOptions });

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns all rows matching the given query.
 * @summary Get
 */
export const getResidentGet = (
    params?: GetResidentGetParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<ResidentPlural>> => {
    return axios.get(`/resident`, {
        params,
        ...options,
    });
};

export const getGetResidentGetQueryKey = (params?: GetResidentGetParams) => [
    `/resident`,
    ...(params ? [params] : []),
];

export const useGetResidentGet = <
    TData = AsyncReturnType<typeof getResidentGet>,
    TError = HTTPValidationError
>(
    params?: GetResidentGetParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getResidentGet>,
            TError,
            TData
        >;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getGetResidentGetQueryKey(params);

    const queryFn: QueryFunction<AsyncReturnType<typeof getResidentGet>> = () =>
        getResidentGet(params, axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof getResidentGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns the number of rows matching the given query.
 * @summary Count
 */
export const countResidentCountGet = (
    params?: CountResidentCountGetParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<CountModel>> => {
    return axios.get(`/resident/count`, {
        params,
        ...options,
    });
};

export const getCountResidentCountGetQueryKey = (
    params?: CountResidentCountGetParams
) => [`/resident/count`, ...(params ? [params] : [])];

export const useCountResidentCountGet = <
    TData = AsyncReturnType<typeof countResidentCountGet>,
    TError = HTTPValidationError
>(
    params?: CountResidentCountGetParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof countResidentCountGet>,
            TError,
            TData
        >;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getCountResidentCountGetQueryKey(params);

    const queryFn: QueryFunction<
        AsyncReturnType<typeof countResidentCountGet>
    > = () => countResidentCountGet(params, axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof countResidentCountGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns a mapping of row IDs to a readable representation.
 * @summary Ids
 */
export const idsResidentIdsGet = (
    params?: IdsResidentIdsGetParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<IdsResidentIdsGet200>> => {
    return axios.get(`/resident/ids`, {
        params,
        ...options,
    });
};

export const getIdsResidentIdsGetQueryKey = (
    params?: IdsResidentIdsGetParams
) => [`/resident/ids`, ...(params ? [params] : [])];

export const useIdsResidentIdsGet = <
    TData = AsyncReturnType<typeof idsResidentIdsGet>,
    TError = HTTPValidationError
>(
    params?: IdsResidentIdsGetParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof idsResidentIdsGet>,
            TError,
            TData
        >;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getIdsResidentIdsGetQueryKey(params);

    const queryFn: QueryFunction<AsyncReturnType<typeof idsResidentIdsGet>> =
        () => idsResidentIdsGet(params, axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof idsResidentIdsGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns all of the default values for a new row,
but doesn't save it.
 * @summary New
 */
export const newResidentNewGet = (
    options?: AxiosRequestConfig
): Promise<AxiosResponse<NewResidentNewGet200>> => {
    return axios.get(`/resident/new`, options);
};

export const getNewResidentNewGetQueryKey = () => [`/resident/new`];

export const useNewResidentNewGet = <
    TData = AsyncReturnType<typeof newResidentNewGet>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<
        AsyncReturnType<typeof newResidentNewGet>,
        TError,
        TData
    >;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey = queryOptions?.queryKey ?? getNewResidentNewGetQueryKey();

    const queryFn: QueryFunction<AsyncReturnType<typeof newResidentNewGet>> =
        () => newResidentNewGet(axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof newResidentNewGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns a list of objects showing relationships with other tables.
 * @summary References
 */
export const referencesResidentReferencesGet = (
    options?: AxiosRequestConfig
): Promise<AxiosResponse<ReferencesModel>> => {
    return axios.get(`/resident/references`, options);
};

export const getReferencesResidentReferencesGetQueryKey = () => [
    `/resident/references`,
];

export const useReferencesResidentReferencesGet = <
    TData = AsyncReturnType<typeof referencesResidentReferencesGet>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<
        AsyncReturnType<typeof referencesResidentReferencesGet>,
        TError,
        TData
    >;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getReferencesResidentReferencesGetQueryKey();

    const queryFn: QueryFunction<
        AsyncReturnType<typeof referencesResidentReferencesGet>
    > = () => referencesResidentReferencesGet(axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof referencesResidentReferencesGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Returns the JSON schema for the given table.
 * @summary Schema
 */
export const schemaResidentSchemaGet = (
    options?: AxiosRequestConfig
): Promise<AxiosResponse<SchemaResidentSchemaGet200>> => {
    return axios.get(`/resident/schema`, options);
};

export const getSchemaResidentSchemaGetQueryKey = () => [`/resident/schema`];

export const useSchemaResidentSchemaGet = <
    TData = AsyncReturnType<typeof schemaResidentSchemaGet>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<
        AsyncReturnType<typeof schemaResidentSchemaGet>,
        TError,
        TData
    >;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getSchemaResidentSchemaGetQueryKey();

    const queryFn: QueryFunction<
        AsyncReturnType<typeof schemaResidentSchemaGet>
    > = () => schemaResidentSchemaGet(axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof schemaResidentSchemaGet>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Retrieve a single row from the table.
 * @summary Get Single
 */
export const getSingleResidentRowIdGet = (
    rowid: number,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<ResidentOutput>> => {
    return axios.get(`/resident/${rowid}`, options);
};

export const getGetSingleResidentRowIdGetQueryKey = (rowid: number) => [
    `/resident/${rowid}`,
];

export const useGetSingleResidentRowIdGet = <
    TData = AsyncReturnType<typeof getSingleResidentRowIdGet>,
    TError = HTTPValidationError
>(
    rowid: number,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof getSingleResidentRowIdGet>,
            TError,
            TData
        >;
        axios?: AxiosRequestConfig;
    }
) => {
    const { query: queryOptions, axios: axiosOptions } = options || {};

    const queryKey =
        queryOptions?.queryKey ?? getGetSingleResidentRowIdGetQueryKey(rowid);

    const queryFn: QueryFunction<
        AsyncReturnType<typeof getSingleResidentRowIdGet>
    > = () => getSingleResidentRowIdGet(rowid, axiosOptions);

    const query = useQuery<
        AsyncReturnType<typeof getSingleResidentRowIdGet>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!rowid, ...queryOptions });

    return {
        queryKey,
        ...query,
    };
};
